package generator

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"reflect"

	"gopkg.in/yaml.v3"

	"github.com/telecom-cloud/crafter/pkg/meta"
	tpl "github.com/telecom-cloud/crafter/pkg/template"
)

// Layout contains the basic information of idl
type Layout struct {
	OutDir      string
	GoModule    string
	ServiceName string
	HasIdl      bool
	NeedGoMod   bool
	ModelDir    string
	HandlerDir  string
	RouterDir   string
}

// LayoutGenerator contains the information generated by generating the layout template
type LayoutGenerator struct {
	ConfigPath string
	tpl.TemplateGenerator
}

var (
	layoutConfig  = tpl.DefaultLayoutConfig
	packageConfig = tpl.DefaultPkgConfig
)

func SetDefaultTemplateConfig() {
	layoutConfig = tpl.DefaultLayoutConfig
	packageConfig = tpl.DefaultPkgConfig
}

func (lg *LayoutGenerator) Init() error {
	config := layoutConfig
	// unmarshal from user-defined config file if it exists
	if lg.ConfigPath != "" {
		cdata, err := os.ReadFile(lg.ConfigPath)
		if err != nil {
			return fmt.Errorf("read layout config from  %s failed, err: %v", lg.ConfigPath, err.Error())
		}
		config = tpl.Config{}
		if err = yaml.Unmarshal(cdata, &config); err != nil {
			return fmt.Errorf("unmarshal layout config failed, err: %v", err.Error())
		}
	}

	if reflect.DeepEqual(config, tpl.Config{}) {
		return errors.New("empty config")
	}
	lg.Config = &config

	return lg.TemplateGenerator.Init()
}

// checkInitialized initialize template definition
func (lg *LayoutGenerator) checkInitialized() error {
	if lg.TemplateGenerator.Templates == nil || lg.Dirs == nil {
		if err := lg.Init(); err != nil {
			return fmt.Errorf("init layout config failed, err: %v", err.Error())
		}
	}
	return nil
}

func (lg *LayoutGenerator) Generate(data map[string]interface{}) error {
	if err := lg.checkInitialized(); err != nil {
		return err
	}
	return lg.TemplateGenerator.Generate(data, "", "", false)
}

func (lg *LayoutGenerator) GenerateByService(service Layout) error {
	if err := lg.checkInitialized(); err != nil {
		return err
	}

	// remove go.mod template
	if !service.NeedGoMod {
		gomodFile := "go.mod"
		if _, exist := lg.TemplateGenerator.Templates[gomodFile]; exist {
			delete(lg.TemplateGenerator.Templates, gomodFile)
		}
	}

	if service.GoModule == "" {
		return errors.New("please specify go-module")
	}

	sd := serviceToLayoutData(service)
	data := map[string]interface{}{
		"*": sd,
	}

	return lg.Generate(data)
}

// serviceToLayoutData stores go mod, serviceName, UseApacheThrift mapping
func serviceToLayoutData(service Layout) map[string]interface{} {
	goMod := service.GoModule
	serviceName := service.ServiceName
	if len(serviceName) == 0 {
		serviceName = meta.DefaultServiceName
	}

	return map[string]interface{}{
		"GoModule":    goMod,
		"ServiceName": serviceName,
	}
}

func (lg *LayoutGenerator) GenerateByConfig(configPath string) error {
	if err := lg.checkInitialized(); err != nil {
		return err
	}
	buf, err := ioutil.ReadFile(configPath)
	if err != nil {
		return fmt.Errorf("read data file '%s' failed, err: %v", configPath, err.Error())
	}
	var data map[string]interface{}
	if err := json.Unmarshal(buf, &data); err != nil {
		return fmt.Errorf("unmarshal json data failed, err: %v", err.Error())
	}
	return lg.Generate(data)
}

func (lg *LayoutGenerator) Degenerate() error {
	return lg.TemplateGenerator.Degenerate()
}
