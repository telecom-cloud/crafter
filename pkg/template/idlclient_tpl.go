package template

var idlClientTpl = `// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package {{.PackageName}}

import (
	"context"
	"fmt"
	"net/http"

	"github.com/telecom-cloud/client-go/pkg/openapi"
	"github.com/telecom-cloud/client-go/pkg/common/config"
	"github.com/telecom-cloud/client-go/pkg/protocol"

{{ range $k, $v := .Imports}}
	{{$k}} "{{$v.Package}}"
{{- end}}
)

// unused protection
var (
	_ = fmt.Formatter(nil)
)

{{$Module := .ServiceName | TrimSuffix}}

type {{$Module}}Client interface {
	{{range $_, $MethodInfo := .ClientMethods}}
		{{$MethodInfo.Name}}(context context.Context, req *{{$MethodInfo.RequestTypeName}}, reqOpt ...config.RequestOption) (resp *{{$MethodInfo.ReturnTypeName}}, rawResponse *protocol.Response, err error)
	{{end}}
}

type {{$Module | ToLowerCamelCase}}Client struct {
	client *HttpClient
}

func New{{$Module}}Client(hostUrl string, ops ...Option) ({{$Module}}Client, error) {
	opts := GetOptions(append(ops, WithHostUrl(hostUrl))...)
	cli, err := NewHttpClient(opts)
	if err != nil {
		return nil, err
	}
	return &{{$Module | ToLowerCamelCase}}Client{
		client: cli,
	}, nil
}

{{range $_, $MethodInfo := .ClientMethods}}
func (s *{{$Module| ToLowerCamelCase}}Client) {{$MethodInfo.Name}}(ctx context.Context, req *{{$MethodInfo.RequestTypeName}}, reqOpt ...config.RequestOption) (resp *{{$MethodInfo.ReturnTypeName}}, rawResponse *protocol.Response, err error) {
	openapiResp := &openapi.Response{}
	{{- if $MethodInfo.DecodeCustomKey }}
	resp = &{{$MethodInfo.ReturnTypeName}}{
		{{$MethodInfo.DecodeCustomKey}}: make([]*{{$MethodInfo.ReturnTypePackage}}.{{$MethodInfo.DecodeCustomKey}}, 0),
	}
	openapiResp.ReturnObj = &resp.{{$MethodInfo.DecodeCustomKey}}
	{{- else }}
	openapiResp.ReturnObj = &resp
	{{- end }}
    {{if $MethodInfo.QueryParamsCode }}
	queryParams := map[string]interface{}{
		{{$MethodInfo.QueryParamsCode}}
	}
	for k, v := range queryParams {
		if v == nil {
			delete(queryParams, k)
		}
	}
    {{- end }}
	ret, err := s.client.R().
		SetContext(ctx).
		{{if $MethodInfo.QueryParamsCode }}
		SetQueryParams(queryParams).
		{{- end }}
		{{if $MethodInfo.PathParamsCode }}
		SetPathParams(map[string]string{
			{{$MethodInfo.PathParamsCode}}
		}).
		{{- end }}
		{{if $MethodInfo.HeaderParamsCode }}
		AddHeaders(map[string]string{
			{{$MethodInfo.HeaderParamsCode}}
		}).
		{{- end }}
		{{if $MethodInfo.FormValueCode }}
		SetFormParams(map[string]string{
			{{$MethodInfo.FormValueCode}}
		}).
		{{- end }}
		{{if $MethodInfo.FormFileCode }}
		SetFormFileParams(map[string]string{
			{{$MethodInfo.FormFileCode}}
		}).
		{{- end }}
		{{$MethodInfo.BodyParamsCode}}
		SetRequestOption(reqOpt...).
		SetResult(openapiResp).
		Execute(http.Method{{if EqualFold $MethodInfo.HTTPMethod "Any"}}Post{{else}}{{ToHttpMethod $MethodInfo.HTTPMethod}}{{end}}, "{{$MethodInfo.Path}}")
	if err != nil {
		return nil, nil, err
	}
    
	rawResponse = ret.RawResponse
	return resp, rawResponse, nil
}
{{end}}

var default{{$Module}}Client, _ = New{{$Module}}Client(baseDomain)

func ConfigDefault{{$Module}}Client(ops ...Option) (err error) {
	default{{$Module}}Client, err = New{{$Module}}Client(baseDomain, ops...)
	return
}

{{range $_, $MethodInfo := .ClientMethods}}
func {{$MethodInfo.Name}}(context context.Context, req *{{$MethodInfo.RequestTypeName}}, reqOpt ...config.RequestOption) (resp *{{$MethodInfo.ReturnTypeName}}, rawResponse *protocol.Response, err error) {
	return default{{$Module}}Client.{{$MethodInfo.Name}}(context, req, reqOpt...)
}
{{end}}
`

var idlGroupClientTpl = `// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Telecom Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package {{.ServiceGroup}}

import (
	"crypto/tls"

	cli "github.com/telecom-cloud/client-go/pkg/client"
)

var baseDomain = "{{.BaseDomain}}"

type ClientSet interface {
	{{- range .Clients }}
	{{.}}() {{.}}Client
	{{- end }}
}

type clientSet struct {
	{{- range .Clients }}
	{{.|ToLowerCamelCase}}Cli {{.}}Client
	{{- end }}
}

func NewClientSet(baseDomain string, options ...Option) (ClientSet, error) {
	defaultOpt := []Option{
		WithClientOption(cli.WithTLSConfig(&tls.Config{
			InsecureSkipVerify: true,
		})),
	}
	options = append(defaultOpt, options...)
	{{- range .Clients }}
	{{.|ToLowerCamelCase}}Cli, err := New{{.}}Client(baseDomain, options...)
	if err != nil {
		return nil, err
	}
	{{- end }}

	return &clientSet{
		{{- range .Clients }}
		{{.|ToLowerCamelCase}}Cli: {{.|ToLowerCamelCase}}Cli,
		{{- end }}
	}, nil
}

{{range .Clients }}
func (cs *clientSet) {{.}}() {{.}}Client {
	return cs.{{.|ToLowerCamelCase}}Cli
}
{{end }}
`
